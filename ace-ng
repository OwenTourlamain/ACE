#!/usr/bin/python3.4

# -- ACE-NG - User Interface and Control for Aberystwyth University PanCam Emulator --
# Author:     Owen Tourlamain
# Supervisor: Dr. Laurence Tyler

import os
import sys
import json

#print(os.path.abspath(os.path.dirname(__file__)) + os.sep + "lib")
sys.path.append(os.path.abspath(os.path.dirname(__file__)) + os.sep + "lib")
from lib.dynamicProperties import DynamicProperties
from lib.au import pancam_api as api
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PIL import ImageQt
#from lib import sipconfig
#from lib import PyQt5
#import sip
#import PyQt5

# TODO: Clean imports
# TODO: Make config use seperate class w/ attributes like strings

class ACE_NG_CORE(object):
    """docstring for ACE_NG."""

    def __init__(self):

        pass#super(ACE_NG, self).__init__()

    def run(self):

        self.verbose = True # TODO: Make this a commandline flag
        self.config = DynamicProperties(os.path.normpath("config/defaultConfig.json"), self.verbose, cleanPaths=True) # TODO: Remove hardcoded paths
        self.strings = DynamicProperties(os.path.normpath("lang/en-GB.json"), self.verbose)
        self.config.update(["config", self.config.usr_cfg_dir])
        self.strings.update(["lang", self.config.usr_lang_dir], self.config.lang_pref)
        self.initMainWindow()

    def initMainWindow(self):
        ace_ng_app = QApplication(sys.argv)
        ex = ACE_NG_APP(self.strings, self.config, self.verbose)
        sys.exit(ace_ng_app.exec_())

class ACE_NG_APP(QMainWindow):
    """docstring for ACE_NG_APP."""

    def __init__(self, strings, config, verbose):
        super().__init__()
        self.verbose = verbose
        self.strings = strings
        self.config = config
        self.title = self.strings.appName
        self.left = 10
        self.top = 10
        self.width = 800
        self.height = 500
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)

        exitAct = QAction(QIcon('exit.png'), 'Exit', self)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit application')
        exitAct.triggered.connect(qApp.quit)

        runFAUPEAct = QAction(QIcon('exit.png'), 'Run AUPE Server', self)
        runFAUPEAct.setStatusTip('Exit application')
        runFAUPEAct.triggered.connect(self.runFAUPE)
        runFAUPEAct.setDisabled(True)

        killFAUPEAct = QAction(QIcon('exit.png'), 'Kill AUPE Server', self)
        killFAUPEAct.setStatusTip('Kill Fake AUPE Server')
        killFAUPEAct.triggered.connect(qApp.quit)
        killFAUPEAct.setDisabled(True)

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('File')
        fileMenu.addAction(exitAct)

        runMenu = menubar.addMenu('Fake AUPE')
        runMenu.addAction(runFAUPEAct)
        runMenu.addAction(killFAUPEAct)

        tabPane = QTabWidget()

        api.system.connect(agent_addr=config.aupe_addr)
        api.pancam.setup_cameras()

        tabList = ["SingleImageCap", "MultiImageCap", "PanTilt"] # TODO: Make this dynamic and configurable
        for tabName in tabList:
            exec("from ext.%s import Tab" % tabName) # HACK: Make class load dynamically
            tab = sys.modules["ext.%s" % tabName].Tab(self.config, self.strings, api, self.verbose)
            tabPane.addTab(tab, tab.title)

        self.setCentralWidget(tabPane)
        self.show()

    def runFAUPE(self): # TODO: Find a way to load this at runtime, display in own window?
        with open("bin/faupe.py") as faupe:
            #print(faupe)
            exec(faupe.read())

    def closeEvent(self, event):
        api.system.disconnect()
        event.accept()

if __name__ == "__main__":
    ace_ng = ACE_NG_CORE()
    ace_ng.run()
