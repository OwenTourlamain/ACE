#!/usr/bin/python3.4

# -- ace-ng - User Interface and Control for Aberystwyth University PanCam Emulator --
# Author:     Owen Tourlamain
# Supervisor: Dr. Laurence Tyler

import os
import sys
import json
import subprocess
import time
import argparse
import glob

# Add /lib to path so we can import our extras
sys.path.append(os.path.abspath(os.path.dirname(__file__)) + os.sep + "lib")
from lib.dynamicProperties import DynamicProperties
from lib.au import pancam_api as api
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

# TODO: Clean imports

class ACE_NG(QMainWindow):
    """docstring for ACE_NG_APP."""

    def __init__(self):
        super().__init__()

        # Simple parser, just adds verbosity for now
        parser = argparse.ArgumentParser(add_help=False)
        parser.add_argument("-v", "--verbose", action="store_true")
        self.verbose = parser.parse_args().verbose

        # Populate the config and strings objects
        # TODO Grap exceptions from broken files
        self.config = DynamicProperties(os.path.normpath("config/defaultConfig.json"), self.verbose, cleanPaths=True) # TODO: Remove hardcoded paths
        self.strings = DynamicProperties(os.path.normpath("lang/en-GB.json"), self.verbose)
        self.config.update(["config", self.config.usr_cfg_dir])
        self.strings.update(["lang", self.config.usr_lang_dir], self.config.lang_pref)

        self.setWindowTitle(self.strings.appName)

        # This will be a reference to the fake server if we need to run that
        self.faupe = None

        # Try to connect to the server, if it fails either launch the fake server, or quit
        try:
            api.system.connect(agent_addr=self.config.aupe_addr)
        except ConnectionRefusedError:
            self.runFAUPE()
            api.system.connect(agent_addr=self.config.fake_aupe_addr)

        # Init the API
        api.pancam.setup_cameras()

        # Dynamically grab the tab names
        tabPane = QTabWidget()
        oldPath = os.getcwd()
        basePath = os.path.dirname(os.path.realpath(sys.argv[0]))
        extPath = os.path.join(basePath, "ext")
        os.chdir(extPath)
        tabList = glob.glob("*.py")
        os.chdir(oldPath)
        tabList.remove("__init__.py")
        tabList.sort()

        # Load in each of the tabs
        for tabName in tabList:
            # Need to strip the ''.py' from the end of each name
            tabName = tabName.replace(".py", "")
            exec("from ext.%s import Tab" % tabName)
            tab = sys.modules["ext.%s" % tabName].Tab(self.config, self.strings, api, self.verbose)
            tabPane.addTab(tab, tab.title)

        self.setCentralWidget(tabPane)

        self.show()

    def closeEvent(self, event):
        api.system.disconnect()
        # Kill the fake server if it is running
        if self.faupe:
            self.faupe.terminate()
        event.accept()

    def runFAUPE(self):
        # Check if we should run the server or quit
        response = QMessageBox.question(self, self.strings.ConnectionFailedTitle, self.strings.ConnectionFailed % self.config.aupe_addr, QMessageBox.Yes, QMessageBox.No)

        if response == QMessageBox.Yes:
            # Need to change directory so faupe doesn't fall over
            oldPath = os.getcwd()
            basePath = os.path.dirname(os.path.realpath(sys.argv[0]))
            binPath = os.path.join(basePath, "bin")
            os.chdir(binPath)
            if self.verbose:
                # Needs python2, would be nice to port to python3 someday
                self.faupe = subprocess.Popen(["python2", "faupe.py"])
            else:
                self.faupe = subprocess.Popen(["python2", "faupe.py"], stdout=subprocess.DEVNULL)
            os.chdir(oldPath)
            # Wait for the server to be responsive
            time.sleep(1)
        else:
            sys.exit(0)

if __name__ == "__main__":

    ace_ng_app = QApplication(sys.argv)
    ex = ACE_NG()
    sys.exit(ace_ng_app.exec_())
