#!/usr/bin/python3.4

# -- ACE-NG - User Interface and Control for Aberystwyth University PanCam Emulator --
# Author:     Owen Tourlamain
# Supervisor: Dr. Laurence Tyler

import os
import sys
import json

#print(os.path.abspath(os.path.dirname(__file__)) + os.sep + "lib")
sys.path.append(os.path.abspath(os.path.dirname(__file__)) + os.sep + "lib")
from lib.strings import Strings
from lib.au import pancam_api as api
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PIL import ImageQt
#from lib import sipconfig
#from lib import PyQt5
#import sip
#import PyQt5

# TODO: Clean imports
# TODO: Make config use seperate class w/ attributes like strings

class ACE_NG_CORE(object):
    """docstring for ACE_NG."""

    def __init__(self):

        pass#super(ACE_NG, self).__init__()

    def run(self):

        self.readConfigs()
        self.Strings = Strings(self.config)
        self.initMainWindow()

    def readConfigs(self):
        try:
            with open("config/defaultConfig.json", 'r') as defaultConfig:
                self.config = json.load(defaultConfig)
        except ValueError:
            # TODO: Make errors more effective
            print("Default config file is malformed, please repair!")
            sys.exit(1)
        except OSError:
            print("Error accessing default config, please fix permissions!")
            sys.exit(1)

        self.config = self.cleanPaths(self.config)

        if os.path.exists(self.config["usr_cfg_dir"]) and os.path.isdir(self.config["usr_cfg_dir"]):
            for file in os.listdir(self.config["usr_cfg_dir"]):
                if file.endswith(".json"):
                    cfgFile = os.path.join(self.config["usr_cfg_dir"], file)
                    try:
                        with open(cfgFile, 'r') as cfg:
                                self.config.update(json.load(cfg))
                    except ValueError:
                        # TODO: Make warnings more effective
                        print("Config file %s is malformed, skipping..." % cfgFile)
                    except OSError:
                        print("Error accessing config file %s, skipping..." % cfgFile)

        self.config = self.cleanPaths(self.config)

    def cleanPaths(self, config):
        for item in config:
            if "dir" in item:
                config[item] = os.path.normpath(config[item])
                config[item] = os.path.expanduser(config[item])
        return config

    def initMainWindow(self):
        ace_ng_app = QApplication(sys.argv)
        ex = ACE_NG_APP(self.Strings, self.config)
        sys.exit(ace_ng_app.exec_())

class ACE_NG_APP(QMainWindow):
    """docstring for ACE_NG_APP."""

    def __init__(self, strings, config):
        super().__init__()
        self.Strings = strings
        self.Config = config
        self.title = self.Strings.appName
        self.left = 0
        self.top = 0
        self.width = 800
        self.height = 500
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)

        exitAct = QAction(QIcon('exit.png'), 'Exit', self)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit application')
        exitAct.triggered.connect(qApp.quit)

        runFAUPEAct = QAction(QIcon('exit.png'), 'Run AUPE Server', self)
        runFAUPEAct.setStatusTip('Exit application')
        runFAUPEAct.triggered.connect(self.runFAUPE)
        runFAUPEAct.setDisabled(True)

        killFAUPEAct = QAction(QIcon('exit.png'), 'Kill AUPE Server', self)
        killFAUPEAct.setStatusTip('Kill Fake AUPE Server')
        killFAUPEAct.triggered.connect(qApp.quit)
        killFAUPEAct.setDisabled(True)

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('File')
        fileMenu.addAction(exitAct)

        runMenu = menubar.addMenu('Fake AUPE')
        runMenu.addAction(runFAUPEAct)
        runMenu.addAction(killFAUPEAct)

        tabPane = QTabWidget()

        tabList = ["SingleImageCap", "MultiImageCap", "PanTilt", "ImageHandling"]
        for tabName in tabList:
            exec("from ext.%s import Tab" % tabName) # HACK: Make class load dynamically
            tab = sys.modules["ext.%s" % tabName].Tab(self.Config, self.Strings, api)
            tabPane.addTab(tab, tab.title)

        self.setCentralWidget(tabPane)
        api.system.connect(agent_addr=config["aupe_addr"])
        api.pancam.setup_cameras()
        self.show()

    def runFAUPE(self): # TODO: Find a way to load this at runtime, display in own window?
        with open("bin/faupe.py") as faupe:
            #print(faupe)
            exec(faupe.read())

    def closeEvent(self, event):
        api.system.disconnect()
        event.accept()

if __name__ == "__main__":
    ace_ng = ACE_NG_CORE()
    ace_ng.run()
